@using FinanceTracker.Web.Enums
@using System.Globalization
@model FinanceTracker.Web.Models.TransactionDateViewModel

<div class="accordion mb-5" id="createCategoryAccordian">

    <div class="accordion-item">
        <h3 class="accordion-header" id="createInfo">
            <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="false" aria-controls="collapseOne">
                <i class="fa-solid fa-sack-dollar me-3 fs-2"></i>
                <h3>What are Transactions?</h3>
            </button>
        </h3>
        <div id="collapseOne" class="accordion-collapse collapse" aria-labelledby="createInfo" data-bs-parent="#createCategoryAccordian">
            <div class="accordion-body">
                <ul class="fs-3">
                    <li class="accordian-List"><p>Transactions are an agreement between to entities. One party agrees to receive and pay for the goods or services rendered by the other party.</p></li>
                    <li class="accordian-List"><p><a asp-controller="Account" asp-action="Index">ACCOUNTS</a> are created to reflect transactions that are considered "Cleared" by you.</p></li>
                    <li class="accordian-List"><p><a asp-controller="Provider" asp-action="Index">CATEGORIES</a> are created to represent the other party you are receiving goods or services from.</p></li>
                    <li class="accordian-List">
                        <p>Financial Tracker uses a simple 3 step process to enter a transaction:</p>
                        <ol>
                            <li class="accordian-List"><p>A Cash Flow movement is initiated from a <a asp-controller="Provider" asp-action="Index">CATEGORY</a>. This could Represent a bill from your Power Company.</p></li>
                            <li class="accordian-List"><p>Identify which Money <a asp-controller="Account" asp-action="Index">ACCOUNT</a> the Cash Flow will be deposited or withdrawn from. This <a asp-controller="Account" asp-action="Index">ACCOUNT</a> could represent your checking account.</p></li>
                            <li class="accordian-List">
                                <p>
                                    Generate a transaction that will represent this Cash Flow from your <a asp-controller="Provider" asp-action="Index">CATEGORY</a> into your <a asp-controller="Account" asp-action="Index">ACCOUNT</a>.
                                    Finally this transaction will represent the flow of money from your to your power company. This will only clear, once the status has been set to clear by you.</p>
                            </li>
                        </ol>
                    </li>
                    <li class="accordian-List"><p>A transaction status being "CLEARED" has several implications as it releates to your <a asp-controller="Account" asp-action="Index">ACCOUNTS</a>.</p></li>
                    <li class="accordian-List"><p>When you first enter a transaction it may have a status of "DUE" this means that you know a deposit or withdrawal will be posting to your <a asp-controller="Account" asp-action="Index">ACCOUNT</a></a> in the future. Therefore no money will be added or removed from your account</p></li>
                    <li class="accordian-List"><p>Later when you verify the transaction posted to your account you can update your transaction to relect this event by modifying the status to "CLEARED"</p></li>
                    <li class="accordian-List"><p>When you do this the transaction amount will update your ACCOUNT.</p></li>
                    <li class="accordian-List"><p>Also be aware that deleting CATEGORIES or ACCOUNTS will have a direct impact to your TRANSACTIONS! All related transaction will be deleted and account activity rolled back.</p></li>
                </ul>
            </div>
        </div>
    </div>

    <div class="accordion-item">
        <h3 class="accordion-header" id="createTips">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                <i class="fa-solid fa-sack-dollar me-3 fs-2"></i>
                <h3>How to use Transactions</h3>
            </button>
        </h3>
        <div id="collapseTwo" class="accordion-collapse collapse" aria-labelledby="createTips" data-bs-parent="#createCategoryAccordian">
            <div class="accordion-body">
                <ul class="fs-3">
                    <li class="accordian-List"><p>To create an Transaction use the ADD TRANSACTION button.</p></li>
                    <li class="accordian-List"><p>You can review your TRANSACTIONS in EDIT. While there, you can update the transactions. All activity will be reflected against your ACCOUNTS.</p></li>
                    <li class="accordian-List"><p>You can create a TRANSACTION which will represent the direction of money from your CATEGORY to your ACCOUNTS.</p></li>
                    <li class="accordian-List"><p>Remember that your CATEGORY represents a 3rd party that is withdrawaling or depositing money into your ACCOUNT.</p></li>
                    <li class="accordian-List"><p>A Deposit Represents money added to your ACCOUNT.</p></li>
                    <li class="accordian-List"><p>A Withdrawal Represents money subtracted from your ACCOUNT.</p></li>
                    <li class="accordian-List"><p>Dollar Tracker does not require any negative numbers from the entry forms.</p></li>
                </ul>
            </div>
        </div>
    </div>

    <div class="accordion-item">
        <h3 class="accordion-header" id="createExamples">
            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapseThree" aria-expanded="false" aria-controls="collapseThree">
                <i class="fa-solid fa-sack-dollar me-3 fs-2"></i>
                <h3>Transaction Examples</h3>
            </button>
        </h3>
        <div id="collapseThree" class="accordion-collapse collapse" aria-labelledby="createExamples" data-bs-parent="#createCategoryAccordian">
            <div class="accordion-body">
                <ul class="fs-3">
                    <li class="accordian-List"><p>Some Common Examples below to help get you started!<p></li>
                    <li class="accordian-List"><p>ACCOUNT: MyBank Checking | CATEGORY: Gas Company | TRANSFER DESCRIPTION: Bill  | WITHDRAWAL/ DEPOSIT: Withdrawal | AMOUNT DUE: 55.00 | DUE DATE: 10/1/23 | STATUS: Due<p></li>
                    <li class="accordian-List"><p>ACCOUNT: MyBank Checking | CATEGORY: Income | TRANSFER DESCRIPTION: Paycheck  | WITHDRAWAL/ DEPOSIT: Deposit | AMOUNT DUE: 4235.23 | DUE DATE: 12/15/23 | STATUS: Cleared<p></li>
                    <li class="accordian-List"><p>ACCOUNT: MyBank Savings | CATEGORY: Interest Accrual | TRANSFER DESCRIPTION: Interest  | WITHDRAWAL/ DEPOSIT: Deposit | AMOUNT DUE: 1.23 | DUE DATE: 5/1/23 | STATUS: Cleared<p></li>
                    <li class="accordian-List"><p>ACCOUNT: MyBank Savings | CATEGORY: Transfer | TRANSFER DESCRIPTION: Transfer from Checking  | WITHDRAWAL/ DEPOSIT: Deposit | AMOUNT DUE: 1000.00 | DUE DATE: 1/1/23 | STATUS: Cleared<p></li>
                    <li class="accordian-List"><p>ACCOUNT: MyBank Checking | CATEGORY: Transfer | TRANSFER DESCRIPTION: Transfer to Savings  | WITHDRAWAL/ DEPOSIT: Withdrawal | AMOUNT DUE: 1000.00 | DUE DATE: 1/1/23 | STATUS: Cleared<p></li>
                </ul>
            </div>
        </div>
    </div>
</div>

@if (@Model is null || @Model?.Transactions?.Count == 0)
{
    
    <h3 class="text-danger">NO TRANSACTIONS FOR THIS MONTH!</h3>

    <h3>If you have reached a month with no transactions <a asp-action="Index">CLICK HERE</a> to go back</h3>
    <hr />
    <h3>Otherwise get started with your first Transaction below!</h3>
    <h3><a asp-controller="Provider" asp-action="Index">CLICK HERE</a> to add your first Financial Category</h3>
    <h3><a asp-controller="Account" asp-action="Index">CLICK HERE</a> to add your first Financial Account.</h3>
    <hr />
    <h3>If you are ready to start tracking then add a transaction below!</h3>
}
else
{
    <!-- Chart Nagivator -->
    <section class="mb-5">
        <!-- Chart  -->
        <ul class="nav nav-tabs" id="myTab" role="tablist">
            <li class="nav-item" role="presentation">
                <a class="nav-link active" id="chart-transaction__tab" data-bs-toggle="tab" data-bs-target="#chart-transaction" role="tab" aria-controls="chart-transaction" aria-selected="true">Transaction Summary</a>
            </li>
            <li class="nav-item" role="presentation">
                <a class="nav-link" id="chart-account__tab" data-bs-toggle="tab" data-bs-target="#chart-account" role="tab" aria-controls="profile" aria-selected="false">Account Summary</a>
            </li>
        </ul>

        <!-- Chart Tab Panes -->
        <div class="tab-content monthControl_background drop-shadow" id="myTabContent">
            <div class="tab-pane fade show active" id="chart-transaction" role="tabpanel" aria-labelledby="chart-transaction__tab">
                <div class="row mt-5 d-flex">

                    <!-- Month Controls -->
                    <div class="col-lg-4 col-12 d-flex align-items-center justify-content-center p-1 monthControl_font">
                        <a asp-action="Index" asp-route-dateTime="@Model?.Transactions?.First().DueDate" asp-route-direction="@DateNavigation.Back">
                            <i class="fa-solid fa-square-caret-left fa-xl"></i>
                        </a>

                        <p class="month">&nbsp @Model?.TargetMonth.ToString("MMMM yyyy") &nbsp</p>

                        <a asp-action="Index" asp-route-dateTime="@Model?.Transactions?.First().DueDate" asp-route-direction="@DateNavigation.Forwards">
                            <i class="fa-solid fa-square-caret-right fa-xl"></i>
                        </a>
                    </div>

                    <!-- Transaction Summary -->
                    <div class="col-lg-8 col-12 p-1">
                        <div class="responsiveChart" id="stackedBarChart_transaction"></div>
                    </div>

                    <!-- Transaction Pie Charts -->
                    <div class="row mt-5 mb-5 p-1">
                        <div class="col-xl-6 col-12" id="pieChart_transactionDeposits" align="center"></div>
                        <div class="col-xl-6 col-12" id="pieChart_transactionWithdrawals" align="center"></div>
                        <div class="col-xl-6 col-12" id="pieChart_status" align="center"></div>
                        <div class="col-xl-6 col-12" align="center"></div>
                    </div>

                </div>
            </div>
            <div class="tab-pane fade" id="chart-account" role="tabpanel" aria-labelledby="chart-account__tab">
                <div class="row mt-5 d-flex">

                    <!-- Month Controls -->
                    <div class="col-lg-4 col-12 d-flex align-items-center justify-content-center p-1 monthControl_font">
                        <a asp-action="Index" asp-route-dateTime="@Model?.Transactions?.First().DueDate" asp-route-direction="@DateNavigation.Back">
                            <i class="fa-solid fa-square-caret-left fa-xl"></i>
                        </a>

                        <p class="month">&nbsp @Model?.TargetMonth.ToString("MMMM yyyy") &nbsp</p>

                        <a asp-action="Index" asp-route-dateTime="@Model?.Transactions?.First().DueDate" asp-route-direction="@DateNavigation.Forwards">
                            <i class="fa-solid fa-square-caret-right fa-xl"></i>
                        </a>
                    </div>

                    <!-- Account Summary -->
                    <div class="col-12 col-lg-8 p-1">
                        <div class="" id="stackedBarChart_account"></div>
                    </div>

                    <!-- Account Pie Charts -->
                    <div class="row mt-5 mb-5 p-1">
                        <div class="col-xl-6 col-12" id="pieChart_account__name" align="center"></div>
                        <div class="col-xl-6 col-12" id="pieChart_account__type" align="center"></div>
                    </div>
                </div>
            </div>
        </div>
    </section>
}

    
<section>
    <!--Transaction Table-->
    @if (Model?.Transactions is not null || Model?.Transactions?.Count > 0)
    {

        <div class="table-responsive topSpace-md drop-shadow mb-4">
            <table class="table align-middle table-secondary table-striped border-secondary table-hover">
                <thead class="table-dark">
                    <tr class="fw-bold">
                        <td>@Html.DisplayNameFor(model => model.Transactions!.First().AccountName)</td>
                        <td>@Html.DisplayNameFor(model => model.Transactions!.First().ProviderName)</td>
                        <td>@Html.DisplayNameFor(model => model.Transactions!.First().Reason)</td>
                        <td>@Html.DisplayNameFor(model => model.Transactions!.First().Type)</td>
                        <td>@Html.DisplayNameFor(model => model.Transactions!.First().AmountDue)</td>
                        <td>@Html.DisplayNameFor(model => model.Transactions!.First().DueDate)</td>
                        <td colspan="5">@Html.DisplayNameFor(model => model.Transactions!.First().Status)</td>
                    </tr>
                </thead>
                <tbody>
                    @{
                        int count = 1;

                        foreach (var transaction in @Model.Transactions)
                        {
                            <!-- Table Row Template -->
                            <tr>
                                <td>@transaction.AccountName</td>
                                <td>@transaction.ProviderName</td>
                                <td>@transaction.Reason</td>
                                <td>@transaction.Type</td>
                                <td>@String.Format("{0:C}", @transaction.AmountDue)</td>
                                <td>@transaction.DueDate</td>
                                <td>@transaction.Status</td>
                                <td>
                                    <input
                                        class="btn btn-outline-primary fw-bold"
                                        type="submit"
                                        value="EDIT"
                                        data-bs-toggle="modal"
                                        data-bs-target="@($"#editModal_{count}")" />
                                </td>
                                <td>
                                    <input
                                        class="btn btn-outline-danger fw-bold"
                                        type="submit"
                                        value="DELETE"
                                        data-bs-toggle="modal"
                                        data-bs-target="@($"#deleteModal_{count}")" />
                                </td>
                                <td>
                                    <!-- Edit Modal -->
                                    <div class="modal fade" id="@($"editModal_{count}")" tabindex="-1" aria-labelledby="@($"Update_Modal_Container_{count}")" aria-hidden="true">
                                        <div class="modal-dialog">
                                            <div class="modal-content">

                                                <div class="modal-header">
                                                    <h5 class="modal-title" id="@($"Update_Modal_Header_{count}")">Edit Transaction</h5>
                                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                                </div>

                                                <div class="modal-body">

                                                    @await Component.InvokeAsync("EditModalForm", @transaction)

                                                </div>

                                            </div>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <!-- Delete Modal -->
                                    <div class="modal fade" id="@($"deleteModal_{count}")" tabindex="-1" aria-labelledby="@($"Delete_Modal_Container_{count}")" aria-hidden="true">
                                        <div class="modal-dialog">
                                            <div class="modal-content">

                                                <div class="modal-header">
                                                    <h5 class="modal-title" id="@($"Delete_Modal_Header_{count}")">Delete Record?</h5>
                                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                                </div>

                                                <div class="modal-body">

                                                    <partial name="/Views/Shared/_TransactionDeleteFormPartial.cshtml" for="@transaction" />

                                                </div>

                                            </div>
                                        </div>
                                    </div>
                                </td>
                            </tr>

                            count++;
                        }
                    }
                </tbody>
            </table>
        </div>
    }

    <!-- Add Modal -->
    <div class="col-12 mb-5 d-flex @(Model?.Transactions is not null ? "justify-content-end" : "justify-content-start")">
        <input
            class="btn btn-success fw-bold"
            type="submit"
            value="ADD TRANSACTION"
            data-bs-toggle="modal"
            data-bs-target="#addModal_1"
        />

        <div class="modal fade" id="addModal_1" tabindex="-1" aria-labelledby="Add_Modal_Container_1" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">

                    <div class="modal-header">
                        <h5 class="modal-title" id="Add_Modal_Header_1">Add Transaction</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>

                    <div class="modal-body">
                        <div class="modal-body">

                            <partial name="~/Views/Shared/_TransactionCreateFormPartial.cshtml" model="new TransactionViewModel {}" />

                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
</section>
    

@section Scripts
{
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script type="text/javascript">
        let providerDepositData;
        let providerWithdrawalData;
        let statusData;
        let statusCountData;
        let accountTypeCostData;
        let accountProviderCostData;
        let accountTypeData;

        // on success load google charts and the corechart package
        google.charts.load("current", { packages: ["corechart"] });
        
        $(document).ready(function () {

            // TRANSACTION CHARTS BEGIN -->
            $.ajax({
              type: "POST",
              dataType: "json",
              contentType: "application/json",
              url: '@Url.Action("GetProviderTransactionDepositResults", "Transaction", new { dateTime = @Model?.Transactions?.First().DueDate })',
              success: function (response) {
                // load the scoped variable for redraw use
                    providerDepositData = response.dataEnum;

                // Draw the Transaction Totals by Provider Pie Chart
                google.charts.setOnLoadCallback(function () {
                  drawSummaryDepositByProvider(providerDepositData);
                });
              },
              error: function (xhr) {
                $.notify("Error", "error");
              } 
            });

            $.ajax({
              type: "POST",
              dataType: "json",
              contentType: "application/json",
              url: '@Url.Action("GetProviderTransactionWithdrawalResults", "Transaction", new { dateTime = @Model?.Transactions?.First().DueDate })',
              success: function (response) {
                // load the scoped variable for redraw use
                    providerWithdrawalData = response.dataEnum;

                // Draw the Transaction Totals by Provider Pie Chart
                google.charts.setOnLoadCallback(function () {
                        drawSummaryWithdrawalByProvider(providerWithdrawalData);
                });
              },
              error: function (xhr) {
                $.notify("Error", "error");
              }
            });

            $.ajax({
              type: "POST",
              dataType: "json",
              contentType: "application/json",
              url: '@Url.Action("GetStatusTransactionResults", "Transaction", new { dateTime = @Model?.Transactions?.First().DueDate })',
              success: function (response) {
                // load the scoped variable for redraw use
                statusData = response.dataEnum

                // Draw the Transaction Totals by Status Pie Chart
                google.charts.setOnLoadCallback(function () {
                  drawSummaryByStatus(statusData);
                });
              },
              error: function (xhr) {
                $.notify("Error", "error");
              } 
            });

            $.ajax({
              type: "POST",
              dataType: "json",
              contentType: "application/json",
              url: '@Url.Action("GetStatusCountTransactionResults", "Transaction", new { dateTime = @Model?.Transactions?.First().DueDate })',
              success: function (response) {
                // load the scoped variable for redraw use
                statusCountData = response.dataEnum

                // Draw the Transaction Status Count Stacked Bar Chart
                google.charts.setOnLoadCallback(function () {
                  drawTransactionStatusCount(statusCountData);
                });                 
              },
              error: function (xhr) {
                $.notify("Error", "error");
              } 
            });

            // <--- TRANSACTION CHARTS END
            //
            //
            //
            // ACCOUNT CHARTS BEGIN ----->

            $.ajax({
              type: "POST",
              dataType: "json",
              contentType: "application/json",
              url: '@Url.Action("GetAccountTypeResults", "Account")',
              success: function (response) {
                // load the scoped variable for redraw use
                accountTypeCostData = response.dataEnum

                // Draw the Account Totals by Type Pie Chart
                google.charts.setOnLoadCallback(function () {
                  drawSummaryByType(accountTypeCostData);
                });
              },
              error: function (xhr) {
                $.notify("Error", "error");
              } 
            });

            $.ajax({
              type: "POST",
              dataType: "json",
              contentType: "application/json",
              url: '@Url.Action("GetAccountProviderCost", "Account")',
              success: function (response) {
                // load the scoped variable for redraw use
                accountProviderCostData = response.dataEnum

                // Draw the Account Totals by Provider Pie Chart
                google.charts.setOnLoadCallback(function () {
                  drawSummaryByAccount(accountProviderCostData);
                });
              },
              error: function (xhr) {
                $.notify("Error", "error");
              } 
            });

            $.ajax({
              type: "POST",
              dataType: "json",
              contentType: "application/json",
              url: '@Url.Action("GetAccountTypeCost", "Account")',
              success: function (response) {
                // load the scoped variable for redraw use
                accountTypeData = response.dataEnum

                // Draw the Account Status Count Stacked Bar Chart
                google.charts.setOnLoadCallback(function () {
                  drawAccountCount(accountTypeData);
                });                 
              },
              error: function (xhr) {
                $.notify("Error", "error");
              } 
            });
        }); 

        // Redraw charts upon resize
        $(window).resize(function(){
            drawSummaryDepositByProvider(providerDepositData);
            drawSummaryWithdrawalByProvider(providerWithdrawalData);
            drawSummaryByStatus(statusData);
            drawTransactionStatusCount(statusCountData);
            drawSummaryByType(accountTypeCostData);
            drawSummaryByAccount(accountProviderCostData);
            drawAccountCount(accountTypeData);
        });
    </script>
}